

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_65536 = Integer(65536); _sage_const_65537 = Integer(65537)
from Crypto.Util.number import *

exec(open("out.txt").read())

def attack(n, e1, c1, e2, c2):
    g, u, v = xgcd(e1, e2)
    p1 = pow(c1, u, n) if u > _sage_const_0  else pow(pow(c1, -_sage_const_1 , n), -u, n)
    p2 = pow(c2, v, n) if v > _sage_const_0  else pow(pow(c2, -_sage_const_1 , n), -v, n)
    return int(ZZ(int(p1 * p2) % n).nth_root(g))

for i in range(_sage_const_65536 ):
  try:
    a = long_to_bytes(attack(n, _sage_const_65537 , ct, i, signature))
    if b"ictf" in a:
      print(a)
      break
  except:
    pass


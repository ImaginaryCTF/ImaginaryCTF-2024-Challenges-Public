

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_8 = Integer(8); _sage_const_2 = Integer(2); _sage_const_64 = Integer(64); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_62 = Integer(62); _sage_const_1337 = Integer(1337); _sage_const_6549227833016977563 = Integer(6549227833016977563); _sage_const_15634179043583660018 = Integer(15634179043583660018); _sage_const_10769788045638517834 = Integer(10769788045638517834); _sage_const_18446744073709551613 = Integer(18446744073709551613)
from pwn import *
import solvelinmod

a = b"\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05\x00"
nums = []
for n in range(_sage_const_0 , len(a), _sage_const_8 ):
  nums.append(u64(a[n:n+_sage_const_8 ]))

print(nums)

mod = _sage_const_2 **_sage_const_64 -_sage_const_3 
a = var('a')
c = var('c')
eq2 = nums[_sage_const_1 ]*-_sage_const_1  + nums[_sage_const_0 ]*a + _sage_const_1 *c == _sage_const_0 
eq3 = nums[_sage_const_2 ]*-_sage_const_1  + nums[_sage_const_1 ]*a + _sage_const_1 *c == _sage_const_0 
bounds = {a: _sage_const_2 **_sage_const_62 , c: _sage_const_2 **_sage_const_62 }
sol = solvelinmod.solve_linear_mod([(eq2, mod), (eq3, mod)], bounds)
print(f'{sol = }')

a = ( int(sol[a]) + mod ) % mod
c = ( int(sol[c]) + mod ) % mod

x = (((nums[_sage_const_0 ] - c) % mod) * pow(a, -_sage_const_1 , mod)) % mod
print(f"{x = }")
print(f"{a = }")
print(f"{c = }")
print(f"{mod = }")

conn = remote("35.204.162.128", int(_sage_const_1337 ))
#conn = process("./lcasm")

x = _sage_const_6549227833016977563 
a = _sage_const_15634179043583660018 
c = _sage_const_10769788045638517834 
mod = _sage_const_18446744073709551613 

conn.sendline(str(x).encode())
conn.sendline(str(a).encode())
conn.sendline(str(c+_sage_const_3 ).encode()) # i have no idea why this works
conn.sendline(str(mod).encode())
conn.interactive()


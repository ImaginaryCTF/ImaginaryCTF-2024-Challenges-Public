

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_64 = Integer(64); _sage_const_4 = Integer(4); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_8 = Integer(8)
import solvelinmod
import random

ords = [random.getrandbits(_sage_const_64 ) for n in range(_sage_const_4 )]
flag = b"ictf"
out = _sage_const_0 
for m,n in zip(ords,flag):
  out += m*n
out %= _sage_const_2 **_sage_const_64 

#ords = [14256968251852713, 5856782038711004, 13348175324113344, 8795510881355283]


x0 = var('x0')
x1 = var('x1')
x2 = var('x2')
x3 = var('x3')
#eq = (ords[0]*x0 + ords[1]*x1 + ords[2]*x2 + ords[3]*x3 == 4522333535772311031)
eq = (ords[_sage_const_0 ]*x0 + ords[_sage_const_1 ]*x1 + ords[_sage_const_2 ]*x2 + ords[_sage_const_3 ]*x3 == out)
bounds = {x0: _sage_const_2 **_sage_const_8 , x1: _sage_const_2 **_sage_const_8 , x2: _sage_const_2 **_sage_const_8 , x3: _sage_const_2 **_sage_const_8 }

sol = solvelinmod.solve_linear_mod([(eq, _sage_const_2 **_sage_const_64 )], bounds)
print(f'{sol = }')


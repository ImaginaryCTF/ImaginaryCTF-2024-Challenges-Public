#include <bits/stdc++.h>
using namespace std;

const unsigned long answer[] = {924303399913049,2830611888841555553,11417572481992307149,9399377228148865497,4466300653933784009,6929356405062948441,1060599744128290109,2413293955258720417,12532996834583759385,924446205882046577,953636631316484173,8178891442779449225,5149328285628553929,14848938488663696553,10695623300750768253,331402136485900945,7526029785593005913,528067901588867841,17934877594923492173,1823014476946146745,4474927539439552841,11848375034122087289,14775913573091536445,6221187839989261569,8706220284657781273,12220531501790844433,6881877824236885709,1709544903114568809,13840396538186662729,1672874960389122761,12890717860805876349,12512590028788979697,17022931942054141529,4432258044383820193,17829278568412944077,15934592270780519321,9284508610800604361,8084337873092305561,9905442585384757565,9968445791360002913,2334598992640348185,11395810839179523505,16674150723980103501,1359876212648330057};

static inline unsigned long my_pow(unsigned long base, unsigned long exponent) {
  if (exponent == 0) {
    return 1;
  } else if (exponent == 1) {
    return base;
  } else if (exponent % 2 == 0) { // Even exponent
    return my_pow(base * base, exponent / 2);
  } else { // Odd exponent
    return base * my_pow(base * base, (exponent - 1) / 2);
  }
}

static inline vector<unsigned long> flagToNum(string flag){
  vector<unsigned long> ans;
  for (int i = 0; i < flag.length(); i++){
    int a;
    a = __toascii(flag[i]);
    ans.push_back(a);
  }
  return ans;
}

static inline unsigned long evalVectPoly(vector<unsigned long> coeff, unsigned long x){
  unsigned long ans = 0;
  for (int i = coeff.size()-1; i>-1; i--){
    unsigned long a = coeff.size()-i-1;
    ans+=coeff[a]*my_pow(x,i);
  }
  return ans;
}

static inline vector<unsigned long> evalMultiPoly(vector<unsigned long> coeff){
  vector<unsigned long> ans;
  for (int i = 2; i < coeff.size()+3; i++){
    ans.push_back(evalVectPoly(coeff,i));
  }
  return ans;
}

int main() {
  cout << "\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28e4\u28e0\u28f6\u281a\u281b\u283f\u2837\u2836\u28e4\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u281f\u2809\u2800\u2800\u28a0\u2844\u2800\u2800\u2800\u2800\u2800\u2809\u2819\u2833\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2880\u2874\u281b\u2801\u2800\u2800\u2800\u2800\u2818\u28f7\u28f4\u280f\u2800\u2800\u28e0\u2844\u2800\u2800\u28a8\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u283a\u28c7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u2800\u2800\u2818\u28fb\u28fb\u2846\u2800\u2800\u2819\u2826\u28c4\u28c0\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u28b0\u285f\u28b7\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u28bb\u2836\u28a4\u2840\r\n\u2800\u2800\u2800\u28fe\u28c7\u2800\u283b\u28c4\u2800\u2800\u2800\u2800\u2800\u28b8\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u28c0\u28f4\u28ff\r\n\u2800\u2800\u28b8\u285f\u283b\u28c6\u2800\u2808\u2833\u2884\u2840\u2800\u2800\u287c\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2836\u2836\u28a4\u28ec\u287f\u2801\r\n\u2800\u2880\u28ff\u2803\u2800\u2839\u28c6\u2800\u2800\u2800\u2819\u2813\u283f\u28a7\u2840\u2800\u28a0\u2874\u28f6\u28f6\u28d2\u28cb\u28c0\u28c0\u28e4\u28f6\u28f6\u281f\u2801\u2800\r\n\u2800\u28fc\u284f\u2800\u2800\u2800\u2819\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u2833\u2836\u2824\u2835\u28f6\u2812\u281a\u283b\u283f\u280b\u2801\u2800\u2800\u2800\u2800\r\n\u28b0\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u28bf\u287f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u283b\u28f7\u2844\u2800\u2800\u2800\u2800\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28b7\u2840\u2800\u2800\u2800\u28b8\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u28ff\u2807\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800" << endl;
  cout << "Enter the password to the Watchdog vault: ";
  string flag;
  //string real="ictf{i_l0ve_interp0lati0n_2ca38d6ef0a709e0}";
  cin >> flag;
  if (flag.length() != 43) {
    cout << "Try Again :(" << endl;
    return 0;
  }
  vector<unsigned long> flagf=flagToNum(flag);
  vector<unsigned long> res = evalMultiPoly(flagf);

  for (int i = 0; i < 44; i++){
    if (res[i] != answer[i]) {
      cout << "Try Again :(" << endl;
      return 0;
    }
  }
  cout << "Correct!" << endl;
}
